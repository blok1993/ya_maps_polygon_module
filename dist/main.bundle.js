!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";t.exports=function(t,e,r){var a=t*e,i=n*t,o=i-(i-t),s=t-o,l=n*e,u=l-(l-e),f=e-u,c=s*f-(a-o*u-s*u-o*f);if(r)return r[0]=c,r[1]=a,r;return[c,a]};var n=+(Math.pow(2,27)+1)},function(t,e,r){"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,a=t-(r-n)+(e-n);if(a)return[a,r];return[r]}(t[0],-e[0]);var a,i,o=new Array(r+n),s=0,l=0,u=0,f=Math.abs,c=t[l],p=f(c),h=-e[u],d=f(h);p<d?(i=c,(l+=1)<r&&(c=t[l],p=f(c))):(i=h,(u+=1)<n&&(h=-e[u],d=f(h)));l<r&&p<d||u>=n?(a=c,(l+=1)<r&&(c=t[l],p=f(c))):(a=h,(u+=1)<n&&(h=-e[u],d=f(h)));var g,v,m=a+i,b=m-a,y=i-b,M=y,w=m;for(;l<r&&u<n;)p<d?(a=c,(l+=1)<r&&(c=t[l],p=f(c))):(a=h,(u+=1)<n&&(h=-e[u],d=f(h))),(y=(i=M)-(b=(m=a+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g;for(;l<r;)(y=(i=M)-(b=(m=(a=c)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(l+=1)<r&&(c=t[l]);for(;u<n;)(y=(i=M)-(b=(m=(a=h)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(u+=1)<n&&(h=-e[u]);M&&(o[s++]=M);w&&(o[s++]=w);s||(o[s++]=0);return o.length=s,o}},function(t,e,r){"use strict";t.exports=function(t,e,r){var n=t+e,a=n-t,i=e-a,o=t-(n-a);if(r)return r[0]=o+i,r[1]=n,r;return[o+i,n]}},function(t,e,r){"use strict";var n=r(0),a=r(2);t.exports=function(t,e){var r=t.length;if(1===r){var i=n(t[0],e);return i[0]?i:[i[1]]}var o=new Array(2*r),s=[.1,.1],l=[.1,.1],u=0;n(t[0],e,s),s[0]&&(o[u++]=s[0]);for(var f=1;f<r;++f){n(t[f],e,l);var c=s[1];a(c,l[0],s),s[0]&&(o[u++]=s[0]);var p=l[1],h=s[1],d=p+h,g=d-p,v=h-g;s[1]=d,v&&(o[u++]=v)}s[1]&&(o[u++]=s[1]);0===u&&(o[u++]=0);return o.length=u,o}},function(t,e,r){"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,a=t-(r-n)+(e-n);if(a)return[a,r];return[r]}(t[0],e[0]);var a,i,o=new Array(r+n),s=0,l=0,u=0,f=Math.abs,c=t[l],p=f(c),h=e[u],d=f(h);p<d?(i=c,(l+=1)<r&&(c=t[l],p=f(c))):(i=h,(u+=1)<n&&(h=e[u],d=f(h)));l<r&&p<d||u>=n?(a=c,(l+=1)<r&&(c=t[l],p=f(c))):(a=h,(u+=1)<n&&(h=e[u],d=f(h)));var g,v,m=a+i,b=m-a,y=i-b,M=y,w=m;for(;l<r&&u<n;)p<d?(a=c,(l+=1)<r&&(c=t[l],p=f(c))):(a=h,(u+=1)<n&&(h=e[u],d=f(h))),(y=(i=M)-(b=(m=a+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g;for(;l<r;)(y=(i=M)-(b=(m=(a=c)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(l+=1)<r&&(c=t[l]);for(;u<n;)(y=(i=M)-(b=(m=(a=h)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(u+=1)<n&&(h=e[u]);M&&(o[s++]=M);w&&(o[s++]=w);s||(o[s++]=0);return o.length=s,o}},function(t,e,r){"use strict";var n=r(0),a=r(4),i=r(3),o=r(1),s=5;function l(t,e){for(var r=new Array(t.length-1),n=1;n<t.length;++n)for(var a=r[n-1]=new Array(t.length-1),i=0,o=0;i<t.length;++i)i!==e&&(a[o++]=t[n][i]);return r}function u(t){if(1===t.length)return t[0];if(2===t.length)return["sum(",t[0],",",t[1],")"].join("");var e=t.length>>1;return["sum(",u(t.slice(0,e)),",",u(t.slice(e)),")"].join("")}function f(t){if(2===t.length)return[["sum(prod(",t[0][0],",",t[1][1],"),prod(-",t[0][1],",",t[1][0],"))"].join("")];for(var e=[],r=0;r<t.length;++r)e.push(["scale(",u(f(l(t,r))),",",(n=r,1&n?"-":""),t[0][r],")"].join(""));return e;var n}function c(t){for(var e=[],r=[],s=function(t){for(var e=new Array(t),r=0;r<t;++r){e[r]=new Array(t);for(var n=0;n<t;++n)e[r][n]=["m",n,"[",t-r-1,"]"].join("")}return e}(t),c=[],p=0;p<t;++p)0==(1&p)?e.push.apply(e,f(l(s,p))):r.push.apply(r,f(l(s,p))),c.push("m"+p);var h=u(e),d=u(r),g="orientation"+t+"Exact",v=["function ",g,"(",c.join(),"){var p=",h,",n=",d,",d=sub(p,n);return d[d.length-1];};return ",g].join("");return new Function("sum","prod","scale","sub",v)(a,n,i,o)}var p=c(3),h=c(4),d=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,r){var n,a=(t[1]-r[1])*(e[0]-r[0]),i=(t[0]-r[0])*(e[1]-r[1]),o=a-i;if(a>0){if(i<=0)return o;n=a+i}else{if(!(a<0))return o;if(i>=0)return o;n=-(a+i)}var s=3.3306690738754716e-16*n;return o>=s||o<=-s?o:p(t,e,r)},function(t,e,r,n){var a=t[0]-n[0],i=e[0]-n[0],o=r[0]-n[0],s=t[1]-n[1],l=e[1]-n[1],u=r[1]-n[1],f=t[2]-n[2],c=e[2]-n[2],p=r[2]-n[2],d=i*u,g=o*l,v=o*s,m=a*u,b=a*l,y=i*s,M=f*(d-g)+c*(v-m)+p*(b-y),w=7.771561172376103e-16*((Math.abs(d)+Math.abs(g))*Math.abs(f)+(Math.abs(v)+Math.abs(m))*Math.abs(c)+(Math.abs(b)+Math.abs(y))*Math.abs(p));return M>w||-M>w?M:h(t,e,r,n)}];!function(){for(;d.length<=s;)d.push(c(d.length));for(var e=[],r=["slow"],n=0;n<=s;++n)e.push("a"+n),r.push("o"+n);var a=["function getOrientation(",e.join(),"){switch(arguments.length){case 0:case 1:return 0;"];for(n=2;n<=s;++n)a.push("case ",n,":return o",n,"(",e.slice(0,n).join(),");");a.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation"),r.push(a.join(""));var i=Function.apply(void 0,r);for(t.exports=i.apply(void 0,[function(t){var e=d[t.length];return e||(e=d[t.length]=c(t.length)),e.apply(void 0,t)}].concat(d)),n=0;n<=s;++n)t.exports[n]=d[n]}()},function(t,e,r){t.exports=function(t,e){for(var r=e[0],a=e[1],i=t.length,o=1,s=i,l=0,u=i-1;l<s;u=l++){var f=t[l],c=t[u],p=f[1],h=c[1];if(h<p){if(h<a&&a<p){var d=n(f,c,e);if(0===d)return 0;o^=0<d|0}else if(a===p){var g=t[(l+1)%i],v=g[1];if(p<v){var d=n(f,c,e);if(0===d)return 0;o^=0<d|0}}}else if(p<h){if(p<a&&a<h){var d=n(f,c,e);if(0===d)return 0;o^=d<0|0}else if(a===p){var g=t[(l+1)%i],v=g[1];if(v<p){var d=n(f,c,e);if(0===d)return 0;o^=d<0|0}}}else if(a===p){var m=Math.min(f[0],c[0]),b=Math.max(f[0],c[0]);if(0===l){for(;u>0;){var y=(u+i-1)%i,M=t[y];if(M[1]!==a)break;var w=M[0];m=Math.min(m,w),b=Math.max(b,w),u=y}if(0===u)return m<=r&&r<=b?0:1;s=u+1}for(var x=t[(u+i-1)%i][1];l+1<s;){var M=t[l+1];if(M[1]!==a)break;var w=M[0];m=Math.min(m,w),b=Math.max(b,w),l+=1}if(m<=r&&r<=b)return 0;var j=t[(l+1)%i][1];r<m&&x<a!=j<a&&(o^=1)}}return 2*o-1};var n=r(5)},function(t,e,r){var n={region:{title:"Регион",items:[{id:"001",title:"Страны мира"},{id:"BY",title:"Беларусь"},{id:"KZ",title:"Казахстан"},{id:"RU",title:"Россия"},{id:"TR",title:"Турция"},{id:"UA",title:"Украина"}]},lang:{title:"Язык",items:[{id:"en",title:"Английский"},{id:"be",title:"Белорусский"},{id:"kk",title:"Казахский"},{id:"ru",title:"Русский"},{id:"tr",title:"Турецкий"},{id:"uk",title:"Украинский"}]},quality:{title:"Точность границ",items:[{id:"0",title:"0"},{id:"1",title:"1"},{id:"2",title:"2"},{id:"3",title:"3"}]}},a=['<div style="line-height: 34px; background-color: #80808080;" id="regions-params">',"{% for paramName, param in data.params %}","{% for key, value in state.values %}","{% if key == paramName %}",'<div class="btn-group btn-group-xs">','<button{% if state.enabled %}{% else %} disabled{% endif %} type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">',"<span>{{ param.title }}</span>",'<span class="value">: {{ value }}</span>','&nbsp;<span class="caret"></span>',"</button>",'<ul class="dropdown-menu {{ paramName }}">',"{% for item in param.items %}",'<li{% if item.id == value %} class="active"{% endif %}>','<a id="regions" href="#" data-param="{{ paramName }}" data-id="{{ item.id }}">',"{{ item.title }}","</a>","</li>","{% endfor %}","</ul>","</div>&nbsp;","{% endif %}","{% endfor %}","{% endfor %}","</div>"].join(""),i=[];$.ajax("data/hotels.json",{success:function(t){(i=t).features.length/=4,ymaps.ready(s)}});var o=r(6);function s(){var t=ymaps.templateLayoutFactory.createClass(a,{build:function(){t.superclass.build.call(this),this.handleClick=ymaps.util.bind(this.handleClick,this),$(this.getParentElement).on("click","a#regions",this.handleClick)},clear:function(){$(this.getParentElement).off("click","a#regions",this.handleClick),t.superclass.clear.call(this)},handleClick:function(t){t.preventDefault();var e=$(t.currentTarget),r=this.getData().state,n=ymaps.util.extend({},r.get("values"));e.hasClass("active")||(n[e.data("param")]=e.data("id"),r.set("values",n))}}),e=ymaps.util.defineClass(function(t){e.superclass.constructor.call(this,t)},ymaps.control.Button,{onAddToMap:function(t){e.superclass.onAddToMap.call(this,t),this.setupStateMonitor(),this.loadRegions(this.state.get("values"))},onRemoveFromMap:function(t){t.geoObjects.remove(this.regions),this.clearStateMonitor(),e.superclass.onRemoveFromMap.call(this,t)},setupStateMonitor:function(){this.stateMonitor=new ymaps.Monitor(this.state),this.stateMonitor.add("values",this.handleStateChange,this)},clearStateMonitor:function(){this.stateMonitor.removeAll()},handleStateChange:function(t){this.loadRegions(t)},handleRegionsLoaded:function(t){this.regions&&r.geoObjects.remove(this.regions),jQuery(".legend-gradient").css("background","linear-gradient(to bottom, rgba(100, 0, 100, 1), rgba(255, 150, 100, 1))");for(var e=performance.now(),n=t.features.length,a=i.features.length,s=0,l=0,u=0,f=0;f<n;f++){t.features[f].properties.pointsNumber=0;for(var c=0;c<t.features[f].geometry.coordinates.length;c++){s++;for(var p=0;p<i.features.length;p++)u++,1!==o(t.features[f].geometry.coordinates[c],i.features[p].geometry.coordinates)&&(t.features[f].properties.pointsNumber++,l++,i.features.splice(p--,1))}}var h=performance.now()-e;console.log("Кол-во итераций "+u),console.log("Кол-во полигонов "+s),console.log("Кол-во точек "+a),console.log("Время работы скрипта "+h.toFixed(2)+" ms"),console.log(" "),console.log("Всего в границы России попало "+l+" точек."),console.log(" ");var d=0;for(f=0;f<n;f++){var g=t.features[f].properties.pointsNumber;d<g&&(d=g),t.features[f].properties.pointsNumber>0&&console.log(t.features[f].properties.name+" "+g+" отелей.")}l=d,this.regions=new ymaps.ObjectManager,this.regions.add(t.features.map(function(t,e){var r=355-(100+Math.floor(155*t.properties.pointsNumber/l)),n=150-Math.floor(150*t.properties.pointsNumber/l),a=t.properties.pointsNumber?.9:.1;return t.options={fillColor:"rgba("+r+", "+n+", 100, "+a+")"},t.id=t.properties.iso3166,t})),r.geoObjects.add(this.regions),this.getMap().setBounds(this.regions.getBounds(),{checkZoomRange:!0})},loadRegions:function(t){return this.disable(),ymaps.borders.load(t.region,t).then(this.handleRegionsLoaded,this).always(this.enable,this)}}),r=new ymaps.Map("map",{center:[50,30],zoom:3,controls:["typeSelector"]},{typeSelectorSize:"small"}),s=new e({state:{enabled:!0,values:{region:"RU",lang:"ru",quality:"1"}},data:{params:n},options:{layout:t},float:"left",maxWidth:[300]});r.controls.add(s),s.events.add("statechange",function(t){console.log(t.get("target").get("values"))})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R3by1wcm9kdWN0L3R3by1wcm9kdWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtc3VidHJhY3Qvcm9idXN0LWRpZmYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3R3by1zdW0vdHdvLXN1bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9idXN0LXNjYWxlL3JvYnVzdC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcm9idXN0LXN1bS9yb2J1c3Qtc3VtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtb3JpZW50YXRpb24vb3JpZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JvYnVzdC1wb2ludC1pbi1wb2x5Z29uL3JvYnVzdC1wbnAuanMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImEiLCJiIiwicmVzdWx0IiwieCIsIlNQTElUVEVSIiwiYWhpIiwiYWxvIiwiYmhpIiwiYmxvIiwieSIsIk1hdGgiLCJwb3ciLCJlIiwiZiIsIm5lIiwibGVuZ3RoIiwibmYiLCJidiIsInNjYWxhclNjYWxhciIsImciLCJBcnJheSIsImNvdW50IiwiZXB0ciIsImZwdHIiLCJhYnMiLCJlaSIsImVhIiwiZmkiLCJmYSIsIl94IiwiX2J2IiwicTAiLCJxMSIsImJyIiwiYXIiLCJ0d29Qcm9kdWN0IiwidHdvU3VtIiwic2NhbGUiLCJ0cyIsInEiLCJ0IiwicHEiLCJyb2J1c3RTdW0iLCJyb2J1c3RTY2FsZSIsInJvYnVzdFN1YnRyYWN0IiwiTlVNX0VYUEFORCIsImNvZmFjdG9yIiwiaiIsImsiLCJnZW5lcmF0ZVN1bSIsImV4cHIiLCJqb2luIiwic2xpY2UiLCJkZXRlcm1pbmFudCIsInB1c2giLCJvcmllbnRhdGlvbiIsInBvcyIsIm5lZyIsIm1hdHJpeCIsImFyZ3MiLCJhcHBseSIsInBvc0V4cHIiLCJuZWdFeHByIiwiZnVuY05hbWUiLCJjb2RlIiwiRnVuY3Rpb24iLCJwcm9jIiwib3JpZW50YXRpb24zRXhhY3QiLCJvcmllbnRhdGlvbjRFeGFjdCIsIkNBQ0hFRCIsImRldCIsInRvbCIsImFkeCIsImJkeCIsImNkeCIsImFkeSIsImJkeSIsImNkeSIsImFkeiIsImJkeiIsImNkeiIsImJkeGNkeSIsImNkeGJkeSIsImNkeGFkeSIsImFkeGNkeSIsImFkeGJkeSIsImJkeGFkeSIsInByb2NBcmdzIiwidW5kZWZpbmVkIiwiY29uY2F0IiwiZ2VuZXJhdGVPcmllbnRhdGlvblByb2MiLCJ2cyIsInBvaW50IiwiaW5zaWRlIiwibGltIiwieWkiLCJ5aiIsIm9yaWVudCIsInlrIiwieDAiLCJtaW4iLCJ4MSIsIm1heCIsInB4IiwieTAiLCJ5MSIsIlJFR0lPTlNfREFUQSIsInJlZ2lvbiIsInRpdGxlIiwiaXRlbXMiLCJpZCIsImxhbmciLCJxdWFsaXR5Iiwib3B0aW9uc1RlbXBsYXRlIiwiaG90ZWxzIiwiJCIsImFqYXgiLCJzdWNjZXNzIiwiZGF0YSIsImZlYXR1cmVzIiwieW1hcHMiLCJyZWFkeSIsImluaXQiLCJjbGFzc2lmeVBvaW50IiwiUmVnaW9uQ29udHJvbExheW91dCIsInRlbXBsYXRlTGF5b3V0RmFjdG9yeSIsImNyZWF0ZUNsYXNzIiwiYnVpbGQiLCJzdXBlcmNsYXNzIiwidGhpcyIsImhhbmRsZUNsaWNrIiwidXRpbCIsImJpbmQiLCJnZXRQYXJlbnRFbGVtZW50Iiwib24iLCJjbGVhciIsIm9mZiIsInByZXZlbnREZWZhdWx0IiwiJHRhcmdldCIsImN1cnJlbnRUYXJnZXQiLCJzdGF0ZSIsImdldERhdGEiLCJuZXdWYWx1ZXMiLCJleHRlbmQiLCJoYXNDbGFzcyIsInNldCIsIlJlZ2lvbkNvbnRyb2wiLCJkZWZpbmVDbGFzcyIsInBhcmFtZXRlcnMiLCJjb25zdHJ1Y3RvciIsImNvbnRyb2wiLCJCdXR0b24iLCJvbkFkZFRvTWFwIiwibWFwIiwic2V0dXBTdGF0ZU1vbml0b3IiLCJsb2FkUmVnaW9ucyIsIm9uUmVtb3ZlRnJvbU1hcCIsImdlb09iamVjdHMiLCJyZW1vdmUiLCJyZWdpb25zIiwiY2xlYXJTdGF0ZU1vbml0b3IiLCJzdGF0ZU1vbml0b3IiLCJNb25pdG9yIiwiYWRkIiwiaGFuZGxlU3RhdGVDaGFuZ2UiLCJyZW1vdmVBbGwiLCJwYXJhbXMiLCJoYW5kbGVSZWdpb25zTG9hZGVkIiwicmVzIiwialF1ZXJ5IiwiY3NzIiwidDAiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIm51bWJlck9mRmVhdHVyZXMiLCJudW1iZXJPZkhvdGVscyIsIm51bWJlck9mQWxsUG9seWdvbnMiLCJob3RlbHNJblJ1c3NpYSIsIml0ZXJhdGlvbnNDb3VudCIsInByb3BlcnRpZXMiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwic3BsaWNlIiwic2NyaXB0VGltZSIsImNvbnNvbGUiLCJsb2ciLCJ0b0ZpeGVkIiwibG9jYWxNYXhpbXVtIiwibnVtIiwiT2JqZWN0TWFuYWdlciIsImZlYXR1cmUiLCJSIiwiZmxvb3IiLCJHIiwiYWxwaGEiLCJvcHRpb25zIiwiZmlsbENvbG9yIiwiaXNvMzE2NiIsImdldE1hcCIsInNldEJvdW5kcyIsImdldEJvdW5kcyIsImNoZWNrWm9vbVJhbmdlIiwiZGlzYWJsZSIsImJvcmRlcnMiLCJsb2FkIiwidGhlbiIsImFsd2F5cyIsImVuYWJsZSIsIk1hcCIsImNlbnRlciIsInpvb20iLCJjb250cm9scyIsInR5cGVTZWxlY3RvclNpemUiLCJyZWdpb25Db250cm9sIiwiZW5hYmxlZCIsInZhbHVlcyIsImxheW91dCIsImZsb2F0IiwibWF4V2lkdGgiLCJldmVudHMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFDQUMsSUFBQU4sS0FNQVosRUFBQW1CLEVBQUEsU0FBQWpCLEdBQ0FZLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURrQixPQUFBLEtBSWpEcEIsRUFBQXFCLEVBQUEsU0FBQWxCLEdBQ0EsSUFBQVMsRUFBQVQsS0FBQW1CLFdBQ0EsV0FBMkIsT0FBQW5CLEVBQUEsU0FDM0IsV0FBaUMsT0FBQUEsR0FFakMsT0FEQUgsRUFBQVUsRUFBQUUsRUFBQSxJQUFBQSxHQUNBQSxHQUlBWixFQUFBYSxFQUFBLFNBQUFVLEVBQUFDLEdBQXNELE9BQUFWLE9BQUFXLFVBQUFDLGVBQUFuQixLQUFBZ0IsRUFBQUMsSUFHdER4QixFQUFBMkIsRUFBQSxHQUlBM0IsSUFBQTRCLEVBQUEsa0NDakVBekIsRUFBQUQsUUFJQSxTQUFBMkIsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBSCxFQUFBQyxFQUVBckIsRUFBQXdCLEVBQUFKLEVB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R0FJQSxJQUFBd04sRUFBQSxTQUFBckwsS0FBQXNMLE1BQUEsSUFBQUYsRUFBQVgsV0FBQSxhQUFBRixJQUNBZ0IsRUFBQSxJQUFBdkwsS0FBQXNMLE1BQUEsSUFBQUYsRUFBQVgsV0FBQSxhQUFBRixHQUVBaUIsRUFBQUosRUFBQVgsV0FBQSxtQkFNQSxPQUpBVyxFQUFBSyxTQUEyQ0MsVUFBQSxRQUFBTCxFQUFBLEtBQUFFLEVBQUEsVUFBQUMsRUFBQSxLQUczQ0osRUFBQWhGLEdBQUFnRixFQUFBWCxXQUFBa0IsUUFDQVAsS0FHQXJDLEVBQUFJLFdBQUFNLElBQUFsQyxLQUFBOEIsU0FDQTlCLEtBQUFxRSxTQUFBQyxVQUNBdEUsS0FBQThCLFFBQUF5QyxhQUNxQkMsZ0JBQUEsS0FJckI5QyxZQUFBLFNBQUFXLEdBRUEsT0FEQXJDLEtBQUF5RSxVQUNBbEYsTUFBQW1GLFFBQUFDLEtBQUF0QyxFQUFBM0QsT0FBQTJELEdBQ0F1QyxLQUFBNUUsS0FBQXNDLG9CQUFBdEMsTUFDQTZFLE9BQUE3RSxLQUFBOEUsT0FBQTlFLFNBSUF3QixFQUFBLElBQUFqQyxNQUFBd0YsSUFBQSxPQUNBQyxRQUFBLE9BQ0FDLEtBQUEsRUFDQUMsVUFBQSxrQkFFQUMsaUJBQUEsVUFJQUMsRUFBQSxJQUFBbkUsR0FDQU4sT0FDQTBFLFNBQUEsRUFDQUMsUUFDQTVHLE9BQUEsS0FDQUksS0FBQSxLQUNBQyxRQUFBLE1BR0FNLE1BQ0FnRCxPQUFBNUQsR0FFQXlGLFNBQ0FxQixPQUFBNUYsR0FFQTZGLE1BQUEsT0FDQUMsVUFBQSxPQUlBakUsRUFBQTBELFNBQUFoRCxJQUFBa0QsR0FFQUEsRUFBQU0sT0FBQXhELElBQUEsdUJBQUF2SixHQUNBNEssUUFBQUMsSUFBQTdLLEVBQUF2QixJQUFBLFVBQUFBLElBQUEiLCJmaWxlIjoibWFpbi5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSB0d29Qcm9kdWN0XG5cbnZhciBTUExJVFRFUiA9ICsoTWF0aC5wb3coMiwgMjcpICsgMS4wKVxuXG5mdW5jdGlvbiB0d29Qcm9kdWN0KGEsIGIsIHJlc3VsdCkge1xuICB2YXIgeCA9IGEgKiBiXG5cbiAgdmFyIGMgPSBTUExJVFRFUiAqIGFcbiAgdmFyIGFiaWcgPSBjIC0gYVxuICB2YXIgYWhpID0gYyAtIGFiaWdcbiAgdmFyIGFsbyA9IGEgLSBhaGlcblxuICB2YXIgZCA9IFNQTElUVEVSICogYlxuICB2YXIgYmJpZyA9IGQgLSBiXG4gIHZhciBiaGkgPSBkIC0gYmJpZ1xuICB2YXIgYmxvID0gYiAtIGJoaVxuXG4gIHZhciBlcnIxID0geCAtIChhaGkgKiBiaGkpXG4gIHZhciBlcnIyID0gZXJyMSAtIChhbG8gKiBiaGkpXG4gIHZhciBlcnIzID0gZXJyMiAtIChhaGkgKiBibG8pXG5cbiAgdmFyIHkgPSBhbG8gKiBibG8gLSBlcnIzXG5cbiAgaWYocmVzdWx0KSB7XG4gICAgcmVzdWx0WzBdID0geVxuICAgIHJlc3VsdFsxXSA9IHhcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICByZXR1cm4gWyB5LCB4IF1cbn0iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IHJvYnVzdFN1YnRyYWN0XG5cbi8vRWFzeSBjYXNlOiBBZGQgdHdvIHNjYWxhcnNcbmZ1bmN0aW9uIHNjYWxhclNjYWxhcihhLCBiKSB7XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIGF2ID0geCAtIGJ2XG4gIHZhciBiciA9IGIgLSBidlxuICB2YXIgYXIgPSBhIC0gYXZcbiAgdmFyIHkgPSBhciArIGJyXG4gIGlmKHkpIHtcbiAgICByZXR1cm4gW3ksIHhdXG4gIH1cbiAgcmV0dXJuIFt4XVxufVxuXG5mdW5jdGlvbiByb2J1c3RTdWJ0cmFjdChlLCBmKSB7XG4gIHZhciBuZSA9IGUubGVuZ3RofDBcbiAgdmFyIG5mID0gZi5sZW5ndGh8MFxuICBpZihuZSA9PT0gMSAmJiBuZiA9PT0gMSkge1xuICAgIHJldHVybiBzY2FsYXJTY2FsYXIoZVswXSwgLWZbMF0pXG4gIH1cbiAgdmFyIG4gPSBuZSArIG5mXG4gIHZhciBnID0gbmV3IEFycmF5KG4pXG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIGVwdHIgPSAwXG4gIHZhciBmcHRyID0gMFxuICB2YXIgYWJzID0gTWF0aC5hYnNcbiAgdmFyIGVpID0gZVtlcHRyXVxuICB2YXIgZWEgPSBhYnMoZWkpXG4gIHZhciBmaSA9IC1mW2ZwdHJdXG4gIHZhciBmYSA9IGFicyhmaSlcbiAgdmFyIGEsIGJcbiAgaWYoZWEgPCBmYSkge1xuICAgIGIgPSBlaVxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgICBlYSA9IGFicyhlaSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYiA9IGZpXG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgICBmYSA9IGFicyhmaSlcbiAgICB9XG4gIH1cbiAgaWYoKGVwdHIgPCBuZSAmJiBlYSA8IGZhKSB8fCAoZnB0ciA+PSBuZikpIHtcbiAgICBhID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGEgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIHkgPSBiIC0gYnZcbiAgdmFyIHEwID0geVxuICB2YXIgcTEgPSB4XG4gIHZhciBfeCwgX2J2LCBfYXYsIF9iciwgX2FyXG4gIHdoaWxlKGVwdHIgPCBuZSAmJiBmcHRyIDwgbmYpIHtcbiAgICBpZihlYSA8IGZhKSB7XG4gICAgICBhID0gZWlcbiAgICAgIGVwdHIgKz0gMVxuICAgICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgICBlYSA9IGFicyhlaSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGZpXG4gICAgICBmcHRyICs9IDFcbiAgICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgICAgIGZhID0gYWJzKGZpKVxuICAgICAgfVxuICAgIH1cbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gIH1cbiAgd2hpbGUoZXB0ciA8IG5lKSB7XG4gICAgYSA9IGVpXG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgfVxuICB9XG4gIHdoaWxlKGZwdHIgPCBuZikge1xuICAgIGEgPSBmaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9IFxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgfVxuICB9XG4gIGlmKHEwKSB7XG4gICAgZ1tjb3VudCsrXSA9IHEwXG4gIH1cbiAgaWYocTEpIHtcbiAgICBnW2NvdW50KytdID0gcTFcbiAgfVxuICBpZighY291bnQpIHtcbiAgICBnW2NvdW50KytdID0gMC4wICBcbiAgfVxuICBnLmxlbmd0aCA9IGNvdW50XG4gIHJldHVybiBnXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSBmYXN0VHdvU3VtXG5cbmZ1bmN0aW9uIGZhc3RUd29TdW0oYSwgYiwgcmVzdWx0KSB7XG5cdHZhciB4ID0gYSArIGJcblx0dmFyIGJ2ID0geCAtIGFcblx0dmFyIGF2ID0geCAtIGJ2XG5cdHZhciBiciA9IGIgLSBidlxuXHR2YXIgYXIgPSBhIC0gYXZcblx0aWYocmVzdWx0KSB7XG5cdFx0cmVzdWx0WzBdID0gYXIgKyBiclxuXHRcdHJlc3VsdFsxXSA9IHhcblx0XHRyZXR1cm4gcmVzdWx0XG5cdH1cblx0cmV0dXJuIFthciticiwgeF1cbn0iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgdHdvUHJvZHVjdCA9IHJlcXVpcmUoXCJ0d28tcHJvZHVjdFwiKVxudmFyIHR3b1N1bSA9IHJlcXVpcmUoXCJ0d28tc3VtXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gc2NhbGVMaW5lYXJFeHBhbnNpb25cblxuZnVuY3Rpb24gc2NhbGVMaW5lYXJFeHBhbnNpb24oZSwgc2NhbGUpIHtcbiAgdmFyIG4gPSBlLmxlbmd0aFxuICBpZihuID09PSAxKSB7XG4gICAgdmFyIHRzID0gdHdvUHJvZHVjdChlWzBdLCBzY2FsZSlcbiAgICBpZih0c1swXSkge1xuICAgICAgcmV0dXJuIHRzXG4gICAgfVxuICAgIHJldHVybiBbIHRzWzFdIF1cbiAgfVxuICB2YXIgZyA9IG5ldyBBcnJheSgyICogbilcbiAgdmFyIHEgPSBbMC4xLCAwLjFdXG4gIHZhciB0ID0gWzAuMSwgMC4xXVxuICB2YXIgY291bnQgPSAwXG4gIHR3b1Byb2R1Y3QoZVswXSwgc2NhbGUsIHEpXG4gIGlmKHFbMF0pIHtcbiAgICBnW2NvdW50KytdID0gcVswXVxuICB9XG4gIGZvcih2YXIgaT0xOyBpPG47ICsraSkge1xuICAgIHR3b1Byb2R1Y3QoZVtpXSwgc2NhbGUsIHQpXG4gICAgdmFyIHBxID0gcVsxXVxuICAgIHR3b1N1bShwcSwgdFswXSwgcSlcbiAgICBpZihxWzBdKSB7XG4gICAgICBnW2NvdW50KytdID0gcVswXVxuICAgIH1cbiAgICB2YXIgYSA9IHRbMV1cbiAgICB2YXIgYiA9IHFbMV1cbiAgICB2YXIgeCA9IGEgKyBiXG4gICAgdmFyIGJ2ID0geCAtIGFcbiAgICB2YXIgeSA9IGIgLSBidlxuICAgIHFbMV0gPSB4XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gIH1cbiAgaWYocVsxXSkge1xuICAgIGdbY291bnQrK10gPSBxWzFdXG4gIH1cbiAgaWYoY291bnQgPT09IDApIHtcbiAgICBnW2NvdW50KytdID0gMC4wXG4gIH1cbiAgZy5sZW5ndGggPSBjb3VudFxuICByZXR1cm4gZ1xufSIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gbGluZWFyRXhwYW5zaW9uU3VtXG5cbi8vRWFzeSBjYXNlOiBBZGQgdHdvIHNjYWxhcnNcbmZ1bmN0aW9uIHNjYWxhclNjYWxhcihhLCBiKSB7XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIGF2ID0geCAtIGJ2XG4gIHZhciBiciA9IGIgLSBidlxuICB2YXIgYXIgPSBhIC0gYXZcbiAgdmFyIHkgPSBhciArIGJyXG4gIGlmKHkpIHtcbiAgICByZXR1cm4gW3ksIHhdXG4gIH1cbiAgcmV0dXJuIFt4XVxufVxuXG5mdW5jdGlvbiBsaW5lYXJFeHBhbnNpb25TdW0oZSwgZikge1xuICB2YXIgbmUgPSBlLmxlbmd0aHwwXG4gIHZhciBuZiA9IGYubGVuZ3RofDBcbiAgaWYobmUgPT09IDEgJiYgbmYgPT09IDEpIHtcbiAgICByZXR1cm4gc2NhbGFyU2NhbGFyKGVbMF0sIGZbMF0pXG4gIH1cbiAgdmFyIG4gPSBuZSArIG5mXG4gIHZhciBnID0gbmV3IEFycmF5KG4pXG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIGVwdHIgPSAwXG4gIHZhciBmcHRyID0gMFxuICB2YXIgYWJzID0gTWF0aC5hYnNcbiAgdmFyIGVpID0gZVtlcHRyXVxuICB2YXIgZWEgPSBhYnMoZWkpXG4gIHZhciBmaSA9IGZbZnB0cl1cbiAgdmFyIGZhID0gYWJzKGZpKVxuICB2YXIgYSwgYlxuICBpZihlYSA8IGZhKSB7XG4gICAgYiA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIGlmKChlcHRyIDwgbmUgJiYgZWEgPCBmYSkgfHwgKGZwdHIgPj0gbmYpKSB7XG4gICAgYSA9IGVpXG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICAgIGVhID0gYWJzKGVpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhID0gZmlcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIHkgPSBiIC0gYnZcbiAgdmFyIHEwID0geVxuICB2YXIgcTEgPSB4XG4gIHZhciBfeCwgX2J2LCBfYXYsIF9iciwgX2FyXG4gIHdoaWxlKGVwdHIgPCBuZSAmJiBmcHRyIDwgbmYpIHtcbiAgICBpZihlYSA8IGZhKSB7XG4gICAgICBhID0gZWlcbiAgICAgIGVwdHIgKz0gMVxuICAgICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgICBlYSA9IGFicyhlaSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGZpXG4gICAgICBmcHRyICs9IDFcbiAgICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgICBmaSA9IGZbZnB0cl1cbiAgICAgICAgZmEgPSBhYnMoZmkpXG4gICAgICB9XG4gICAgfVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgfVxuICB3aGlsZShlcHRyIDwgbmUpIHtcbiAgICBhID0gZWlcbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gICAgZXB0ciArPSAxXG4gICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICBlaSA9IGVbZXB0cl1cbiAgICB9XG4gIH1cbiAgd2hpbGUoZnB0ciA8IG5mKSB7XG4gICAgYSA9IGZpXG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH0gXG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgICBmcHRyICs9IDFcbiAgICBpZihmcHRyIDwgbmYpIHtcbiAgICAgIGZpID0gZltmcHRyXVxuICAgIH1cbiAgfVxuICBpZihxMCkge1xuICAgIGdbY291bnQrK10gPSBxMFxuICB9XG4gIGlmKHExKSB7XG4gICAgZ1tjb3VudCsrXSA9IHExXG4gIH1cbiAgaWYoIWNvdW50KSB7XG4gICAgZ1tjb3VudCsrXSA9IDAuMCAgXG4gIH1cbiAgZy5sZW5ndGggPSBjb3VudFxuICByZXR1cm4gZ1xufSIsIlwidXNlIHN0cmljdFwiXG5cbnZhciB0d29Qcm9kdWN0ID0gcmVxdWlyZShcInR3by1wcm9kdWN0XCIpXG52YXIgcm9idXN0U3VtID0gcmVxdWlyZShcInJvYnVzdC1zdW1cIilcbnZhciByb2J1c3RTY2FsZSA9IHJlcXVpcmUoXCJyb2J1c3Qtc2NhbGVcIilcbnZhciByb2J1c3RTdWJ0cmFjdCA9IHJlcXVpcmUoXCJyb2J1c3Qtc3VidHJhY3RcIilcblxudmFyIE5VTV9FWFBBTkQgPSA1XG5cbnZhciBFUFNJTE9OICAgICA9IDEuMTEwMjIzMDI0NjI1MTU2NWUtMTZcbnZhciBFUlJCT1VORDMgICA9ICgzLjAgKyAxNi4wICogRVBTSUxPTikgKiBFUFNJTE9OXG52YXIgRVJSQk9VTkQ0ICAgPSAoNy4wICsgNTYuMCAqIEVQU0lMT04pICogRVBTSUxPTlxuXG5mdW5jdGlvbiBjb2ZhY3RvcihtLCBjKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgZm9yKHZhciBpPTE7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgIHZhciByID0gcmVzdWx0W2ktMV0gPSBuZXcgQXJyYXkobS5sZW5ndGgtMSlcbiAgICBmb3IodmFyIGo9MCxrPTA7IGo8bS5sZW5ndGg7ICsraikge1xuICAgICAgaWYoaiA9PT0gYykge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgcltrKytdID0gbVtpXVtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIG1hdHJpeChuKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobilcbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gbmV3IEFycmF5KG4pXG4gICAgZm9yKHZhciBqPTA7IGo8bjsgKytqKSB7XG4gICAgICByZXN1bHRbaV1bal0gPSBbXCJtXCIsIGosIFwiW1wiLCAobi1pLTEpLCBcIl1cIl0uam9pbihcIlwiKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHNpZ24obikge1xuICBpZihuICYgMSkge1xuICAgIHJldHVybiBcIi1cIlxuICB9XG4gIHJldHVybiBcIlwiXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3VtKGV4cHIpIHtcbiAgaWYoZXhwci5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZXhwclswXVxuICB9IGVsc2UgaWYoZXhwci5sZW5ndGggPT09IDIpIHtcbiAgICByZXR1cm4gW1wic3VtKFwiLCBleHByWzBdLCBcIixcIiwgZXhwclsxXSwgXCIpXCJdLmpvaW4oXCJcIilcbiAgfSBlbHNlIHtcbiAgICB2YXIgbSA9IGV4cHIubGVuZ3RoPj4xXG4gICAgcmV0dXJuIFtcInN1bShcIiwgZ2VuZXJhdGVTdW0oZXhwci5zbGljZSgwLCBtKSksIFwiLFwiLCBnZW5lcmF0ZVN1bShleHByLnNsaWNlKG0pKSwgXCIpXCJdLmpvaW4oXCJcIilcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmFudChtKSB7XG4gIGlmKG0ubGVuZ3RoID09PSAyKSB7XG4gICAgcmV0dXJuIFtbXCJzdW0ocHJvZChcIiwgbVswXVswXSwgXCIsXCIsIG1bMV1bMV0sIFwiKSxwcm9kKC1cIiwgbVswXVsxXSwgXCIsXCIsIG1bMV1bMF0sIFwiKSlcIl0uam9pbihcIlwiKV1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZXhwciA9IFtdXG4gICAgZm9yKHZhciBpPTA7IGk8bS5sZW5ndGg7ICsraSkge1xuICAgICAgZXhwci5wdXNoKFtcInNjYWxlKFwiLCBnZW5lcmF0ZVN1bShkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSkpLCBcIixcIiwgc2lnbihpKSwgbVswXVtpXSwgXCIpXCJdLmpvaW4oXCJcIikpXG4gICAgfVxuICAgIHJldHVybiBleHByXG4gIH1cbn1cblxuZnVuY3Rpb24gb3JpZW50YXRpb24obikge1xuICB2YXIgcG9zID0gW11cbiAgdmFyIG5lZyA9IFtdXG4gIHZhciBtID0gbWF0cml4KG4pXG4gIHZhciBhcmdzID0gW11cbiAgZm9yKHZhciBpPTA7IGk8bjsgKytpKSB7XG4gICAgaWYoKGkmMSk9PT0wKSB7XG4gICAgICBwb3MucHVzaC5hcHBseShwb3MsIGRldGVybWluYW50KGNvZmFjdG9yKG0sIGkpKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmVnLnB1c2guYXBwbHkobmVnLCBkZXRlcm1pbmFudChjb2ZhY3RvcihtLCBpKSkpXG4gICAgfVxuICAgIGFyZ3MucHVzaChcIm1cIiArIGkpXG4gIH1cbiAgdmFyIHBvc0V4cHIgPSBnZW5lcmF0ZVN1bShwb3MpXG4gIHZhciBuZWdFeHByID0gZ2VuZXJhdGVTdW0obmVnKVxuICB2YXIgZnVuY05hbWUgPSBcIm9yaWVudGF0aW9uXCIgKyBuICsgXCJFeGFjdFwiXG4gIHZhciBjb2RlID0gW1wiZnVuY3Rpb24gXCIsIGZ1bmNOYW1lLCBcIihcIiwgYXJncy5qb2luKCksIFwiKXt2YXIgcD1cIiwgcG9zRXhwciwgXCIsbj1cIiwgbmVnRXhwciwgXCIsZD1zdWIocCxuKTtcXFxucmV0dXJuIGRbZC5sZW5ndGgtMV07fTtyZXR1cm4gXCIsIGZ1bmNOYW1lXS5qb2luKFwiXCIpXG4gIHZhciBwcm9jID0gbmV3IEZ1bmN0aW9uKFwic3VtXCIsIFwicHJvZFwiLCBcInNjYWxlXCIsIFwic3ViXCIsIGNvZGUpXG4gIHJldHVybiBwcm9jKHJvYnVzdFN1bSwgdHdvUHJvZHVjdCwgcm9idXN0U2NhbGUsIHJvYnVzdFN1YnRyYWN0KVxufVxuXG52YXIgb3JpZW50YXRpb24zRXhhY3QgPSBvcmllbnRhdGlvbigzKVxudmFyIG9yaWVudGF0aW9uNEV4YWN0ID0gb3JpZW50YXRpb24oNClcblxudmFyIENBQ0hFRCA9IFtcbiAgZnVuY3Rpb24gb3JpZW50YXRpb24wKCkgeyByZXR1cm4gMCB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjEoKSB7IHJldHVybiAwIH0sXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uMihhLCBiKSB7IFxuICAgIHJldHVybiBiWzBdIC0gYVswXVxuICB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjMoYSwgYiwgYykge1xuICAgIHZhciBsID0gKGFbMV0gLSBjWzFdKSAqIChiWzBdIC0gY1swXSlcbiAgICB2YXIgciA9IChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGNbMV0pXG4gICAgdmFyIGRldCA9IGwgLSByXG4gICAgdmFyIHNcbiAgICBpZihsID4gMCkge1xuICAgICAgaWYociA8PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSBsICsgclxuICAgICAgfVxuICAgIH0gZWxzZSBpZihsIDwgMCkge1xuICAgICAgaWYociA+PSAwKSB7XG4gICAgICAgIHJldHVybiBkZXRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSAtKGwgKyByKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGV0XG4gICAgfVxuICAgIHZhciB0b2wgPSBFUlJCT1VORDMgKiBzXG4gICAgaWYoZGV0ID49IHRvbCB8fCBkZXQgPD0gLXRvbCkge1xuICAgICAgcmV0dXJuIGRldFxuICAgIH1cbiAgICByZXR1cm4gb3JpZW50YXRpb24zRXhhY3QoYSwgYiwgYylcbiAgfSxcbiAgZnVuY3Rpb24gb3JpZW50YXRpb240KGEsYixjLGQpIHtcbiAgICB2YXIgYWR4ID0gYVswXSAtIGRbMF1cbiAgICB2YXIgYmR4ID0gYlswXSAtIGRbMF1cbiAgICB2YXIgY2R4ID0gY1swXSAtIGRbMF1cbiAgICB2YXIgYWR5ID0gYVsxXSAtIGRbMV1cbiAgICB2YXIgYmR5ID0gYlsxXSAtIGRbMV1cbiAgICB2YXIgY2R5ID0gY1sxXSAtIGRbMV1cbiAgICB2YXIgYWR6ID0gYVsyXSAtIGRbMl1cbiAgICB2YXIgYmR6ID0gYlsyXSAtIGRbMl1cbiAgICB2YXIgY2R6ID0gY1syXSAtIGRbMl1cbiAgICB2YXIgYmR4Y2R5ID0gYmR4ICogY2R5XG4gICAgdmFyIGNkeGJkeSA9IGNkeCAqIGJkeVxuICAgIHZhciBjZHhhZHkgPSBjZHggKiBhZHlcbiAgICB2YXIgYWR4Y2R5ID0gYWR4ICogY2R5XG4gICAgdmFyIGFkeGJkeSA9IGFkeCAqIGJkeVxuICAgIHZhciBiZHhhZHkgPSBiZHggKiBhZHlcbiAgICB2YXIgZGV0ID0gYWR6ICogKGJkeGNkeSAtIGNkeGJkeSkgXG4gICAgICAgICAgICArIGJkeiAqIChjZHhhZHkgLSBhZHhjZHkpXG4gICAgICAgICAgICArIGNkeiAqIChhZHhiZHkgLSBiZHhhZHkpXG4gICAgdmFyIHBlcm1hbmVudCA9IChNYXRoLmFicyhiZHhjZHkpICsgTWF0aC5hYnMoY2R4YmR5KSkgKiBNYXRoLmFicyhhZHopXG4gICAgICAgICAgICAgICAgICArIChNYXRoLmFicyhjZHhhZHkpICsgTWF0aC5hYnMoYWR4Y2R5KSkgKiBNYXRoLmFicyhiZHopXG4gICAgICAgICAgICAgICAgICArIChNYXRoLmFicyhhZHhiZHkpICsgTWF0aC5hYnMoYmR4YWR5KSkgKiBNYXRoLmFicyhjZHopXG4gICAgdmFyIHRvbCA9IEVSUkJPVU5ENCAqIHBlcm1hbmVudFxuICAgIGlmICgoZGV0ID4gdG9sKSB8fCAoLWRldCA+IHRvbCkpIHtcbiAgICAgIHJldHVybiBkZXRcbiAgICB9XG4gICAgcmV0dXJuIG9yaWVudGF0aW9uNEV4YWN0KGEsYixjLGQpXG4gIH1cbl1cblxuZnVuY3Rpb24gc2xvd09yaWVudChhcmdzKSB7XG4gIHZhciBwcm9jID0gQ0FDSEVEW2FyZ3MubGVuZ3RoXVxuICBpZighcHJvYykge1xuICAgIHByb2MgPSBDQUNIRURbYXJncy5sZW5ndGhdID0gb3JpZW50YXRpb24oYXJncy5sZW5ndGgpXG4gIH1cbiAgcmV0dXJuIHByb2MuYXBwbHkodW5kZWZpbmVkLCBhcmdzKVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU9yaWVudGF0aW9uUHJvYygpIHtcbiAgd2hpbGUoQ0FDSEVELmxlbmd0aCA8PSBOVU1fRVhQQU5EKSB7XG4gICAgQ0FDSEVELnB1c2gob3JpZW50YXRpb24oQ0FDSEVELmxlbmd0aCkpXG4gIH1cbiAgdmFyIGFyZ3MgPSBbXVxuICB2YXIgcHJvY0FyZ3MgPSBbXCJzbG93XCJdXG4gIGZvcih2YXIgaT0wOyBpPD1OVU1fRVhQQU5EOyArK2kpIHtcbiAgICBhcmdzLnB1c2goXCJhXCIgKyBpKVxuICAgIHByb2NBcmdzLnB1c2goXCJvXCIgKyBpKVxuICB9XG4gIHZhciBjb2RlID0gW1xuICAgIFwiZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oXCIsIGFyZ3Muam9pbigpLCBcIil7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpjYXNlIDE6cmV0dXJuIDA7XCJcbiAgXVxuICBmb3IodmFyIGk9MjsgaTw9TlVNX0VYUEFORDsgKytpKSB7XG4gICAgY29kZS5wdXNoKFwiY2FzZSBcIiwgaSwgXCI6cmV0dXJuIG9cIiwgaSwgXCIoXCIsIGFyZ3Muc2xpY2UoMCwgaSkuam9pbigpLCBcIik7XCIpXG4gIH1cbiAgY29kZS5wdXNoKFwifXZhciBzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtmb3IodmFyIGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7KytpKXtzW2ldPWFyZ3VtZW50c1tpXX07cmV0dXJuIHNsb3cocyk7fXJldHVybiBnZXRPcmllbnRhdGlvblwiKVxuICBwcm9jQXJncy5wdXNoKGNvZGUuam9pbihcIlwiKSlcblxuICB2YXIgcHJvYyA9IEZ1bmN0aW9uLmFwcGx5KHVuZGVmaW5lZCwgcHJvY0FyZ3MpXG4gIG1vZHVsZS5leHBvcnRzID0gcHJvYy5hcHBseSh1bmRlZmluZWQsIFtzbG93T3JpZW50XS5jb25jYXQoQ0FDSEVEKSlcbiAgZm9yKHZhciBpPTA7IGk8PU5VTV9FWFBBTkQ7ICsraSkge1xuICAgIG1vZHVsZS5leHBvcnRzW2ldID0gQ0FDSEVEW2ldXG4gIH1cbn1cblxuZ2VuZXJhdGVPcmllbnRhdGlvblByb2MoKSIsIm1vZHVsZS5leHBvcnRzID0gcm9idXN0UG9pbnRJblBvbHlnb25cblxudmFyIG9yaWVudCA9IHJlcXVpcmUoJ3JvYnVzdC1vcmllbnRhdGlvbicpXG5cbmZ1bmN0aW9uIHJvYnVzdFBvaW50SW5Qb2x5Z29uKHZzLCBwb2ludCkge1xuICB2YXIgeCA9IHBvaW50WzBdXG4gIHZhciB5ID0gcG9pbnRbMV1cbiAgdmFyIG4gPSB2cy5sZW5ndGhcbiAgdmFyIGluc2lkZSA9IDFcbiAgdmFyIGxpbSA9IG5cbiAgZm9yKHZhciBpID0gMCwgaiA9IG4tMTsgaTxsaW07IGo9aSsrKSB7XG4gICAgdmFyIGEgPSB2c1tpXVxuICAgIHZhciBiID0gdnNbal1cbiAgICB2YXIgeWkgPSBhWzFdXG4gICAgdmFyIHlqID0gYlsxXVxuICAgIGlmKHlqIDwgeWkpIHtcbiAgICAgIGlmKHlqIDwgeSAmJiB5IDwgeWkpIHtcbiAgICAgICAgdmFyIHMgPSBvcmllbnQoYSwgYiwgcG9pbnQpXG4gICAgICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2lkZSBePSAoMCA8IHMpfDBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKHkgPT09IHlpKSB7XG4gICAgICAgIHZhciBjID0gdnNbKGkrMSklbl1cbiAgICAgICAgdmFyIHlrID0gY1sxXVxuICAgICAgICBpZih5aSA8IHlrKSB7XG4gICAgICAgICAgdmFyIHMgPSBvcmllbnQoYSwgYiwgcG9pbnQpXG4gICAgICAgICAgaWYocyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zaWRlIF49ICgwIDwgcyl8MFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZih5aSA8IHlqKSB7XG4gICAgICBpZih5aSA8IHkgJiYgeSA8IHlqKSB7XG4gICAgICAgIHZhciBzID0gb3JpZW50KGEsIGIsIHBvaW50KVxuICAgICAgICBpZihzID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnNpZGUgXj0gKHMgPCAwKXwwXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZih5ID09PSB5aSkge1xuICAgICAgICB2YXIgYyA9IHZzWyhpKzEpJW5dXG4gICAgICAgIHZhciB5ayA9IGNbMV1cbiAgICAgICAgaWYoeWsgPCB5aSkge1xuICAgICAgICAgIHZhciBzID0gb3JpZW50KGEsIGIsIHBvaW50KVxuICAgICAgICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc2lkZSBePSAocyA8IDApfDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYoeSA9PT0geWkpIHtcbiAgICAgIHZhciB4MCA9IE1hdGgubWluKGFbMF0sIGJbMF0pXG4gICAgICB2YXIgeDEgPSBNYXRoLm1heChhWzBdLCBiWzBdKVxuICAgICAgaWYoaSA9PT0gMCkge1xuICAgICAgICB3aGlsZShqPjApIHtcbiAgICAgICAgICB2YXIgayA9IChqK24tMSklblxuICAgICAgICAgIHZhciBwID0gdnNba11cbiAgICAgICAgICBpZihwWzFdICE9PSB5KSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHggPSBwWzBdXG4gICAgICAgICAgeDAgPSBNYXRoLm1pbih4MCwgcHgpXG4gICAgICAgICAgeDEgPSBNYXRoLm1heCh4MSwgcHgpXG4gICAgICAgICAgaiA9IGtcbiAgICAgICAgfVxuICAgICAgICBpZihqID09PSAwKSB7XG4gICAgICAgICAgaWYoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gMSBcbiAgICAgICAgfVxuICAgICAgICBsaW0gPSBqKzFcbiAgICAgIH1cbiAgICAgIHZhciB5MCA9IHZzWyhqK24tMSklbl1bMV1cbiAgICAgIHdoaWxlKGkrMTxsaW0pIHtcbiAgICAgICAgdmFyIHAgPSB2c1tpKzFdXG4gICAgICAgIGlmKHBbMV0gIT09IHkpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHZhciBweCA9IHBbMF1cbiAgICAgICAgeDAgPSBNYXRoLm1pbih4MCwgcHgpXG4gICAgICAgIHgxID0gTWF0aC5tYXgoeDEsIHB4KVxuICAgICAgICBpICs9IDFcbiAgICAgIH1cbiAgICAgIGlmKHgwIDw9IHggJiYgeCA8PSB4MSkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuICAgICAgdmFyIHkxID0gdnNbKGkrMSklbl1bMV1cbiAgICAgIGlmKHggPCB4MCAmJiAoeTAgPCB5ICE9PSB5MSA8IHkpKSB7XG4gICAgICAgIGluc2lkZSBePSAxXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAyICogaW5zaWRlIC0gMVxufSIsInZhciBSRUdJT05TX0RBVEEgPSB7XHJcbiAgICAgICAgcmVnaW9uOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn0KDQtdCz0LjQvtC9JyxcclxuICAgICAgICAgICAgaXRlbXM6IFt7XHJcbiAgICAgICAgICAgICAgICBpZDogJzAwMScsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Ch0YLRgNCw0L3RiyDQvNC40YDQsCdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdCWScsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CR0LXQu9Cw0YDRg9GB0YwnXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnS1onLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQmtCw0LfQsNGF0YHRgtCw0L0nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnUlUnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQoNC+0YHRgdC40Y8nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnVFInLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQotGD0YDRhtC40Y8nXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnVUEnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQo9C60YDQsNC40L3QsCdcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhbmc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICfQr9C30YvQuicsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBbe1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdlbicsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CQ0L3Qs9C70LjQudGB0LrQuNC5J1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogJ2JlJyxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn0JHQtdC70L7RgNGD0YHRgdC60LjQuSdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdraycsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Ca0LDQt9Cw0YXRgdC60LjQuSdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdydScsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cg0YPRgdGB0LrQuNC5J1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogJ3RyJyxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn0KLRg9GA0LXRhtC60LjQuSdcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICd1aycsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cj0LrRgNCw0LjQvdGB0LrQuNC5J1xyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcXVhbGl0eToge1xyXG4gICAgICAgICAgICB0aXRsZTogJ9Ci0L7Rh9C90L7RgdGC0Ywg0LPRgNCw0L3QuNGGJyxcclxuICAgICAgICAgICAgaXRlbXM6IFt7XHJcbiAgICAgICAgICAgICAgICBpZDogJzAnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICcwJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogJzEnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICcxJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogJzInLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICcyJ1xyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICBpZDogJzMnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICczJ1xyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyDQqNCw0LHQu9C+0L0gaHRtbC3RgdC+0LTQtdGA0LbQuNC80L7Qs9C+INC80LDQutC10YLQsC5cclxuICAgIG9wdGlvbnNUZW1wbGF0ZSA9IFtcclxuICAgICAgICAnPGRpdiBzdHlsZT1cImxpbmUtaGVpZ2h0OiAzNHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiAjODA4MDgwODA7XCIgaWQ9XCJyZWdpb25zLXBhcmFtc1wiPicsXHJcbiAgICAgICAgJ3slIGZvciBwYXJhbU5hbWUsIHBhcmFtIGluIGRhdGEucGFyYW1zICV9JyxcclxuICAgICAgICAneyUgZm9yIGtleSwgdmFsdWUgaW4gc3RhdGUudmFsdWVzICV9JyxcclxuICAgICAgICAneyUgaWYga2V5ID09IHBhcmFtTmFtZSAlfScsXHJcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXhzXCI+JyxcclxuICAgICAgICAnPGJ1dHRvbnslIGlmIHN0YXRlLmVuYWJsZWQgJX17JSBlbHNlICV9IGRpc2FibGVkeyUgZW5kaWYgJX0gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj4nLFxyXG4gICAgICAgICc8c3Bhbj57eyBwYXJhbS50aXRsZSB9fTwvc3Bhbj4nLFxyXG4gICAgICAgICc8c3BhbiBjbGFzcz1cInZhbHVlXCI+OiB7eyB2YWx1ZSB9fTwvc3Bhbj4nLFxyXG4gICAgICAgICcmbmJzcDs8c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPicsXHJcbiAgICAgICAgJzwvYnV0dG9uPicsXHJcbiAgICAgICAgJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnUge3sgcGFyYW1OYW1lIH19XCI+JyxcclxuICAgICAgICAneyUgZm9yIGl0ZW0gaW4gcGFyYW0uaXRlbXMgJX0nLFxyXG4gICAgICAgICc8bGl7JSBpZiBpdGVtLmlkID09IHZhbHVlICV9IGNsYXNzPVwiYWN0aXZlXCJ7JSBlbmRpZiAlfT4nLFxyXG4gICAgICAgICc8YSBpZD1cInJlZ2lvbnNcIiBocmVmPVwiI1wiIGRhdGEtcGFyYW09XCJ7eyBwYXJhbU5hbWUgfX1cIiBkYXRhLWlkPVwie3sgaXRlbS5pZCB9fVwiPicsXHJcbiAgICAgICAgJ3t7IGl0ZW0udGl0bGUgfX0nLFxyXG4gICAgICAgICc8L2E+JyxcclxuICAgICAgICAnPC9saT4nLFxyXG4gICAgICAgICd7JSBlbmRmb3IgJX0nLFxyXG4gICAgICAgICc8L3VsPicsXHJcbiAgICAgICAgJzwvZGl2PiZuYnNwOycsXHJcbiAgICAgICAgJ3slIGVuZGlmICV9JyxcclxuICAgICAgICAneyUgZW5kZm9yICV9JyxcclxuICAgICAgICAneyUgZW5kZm9yICV9JyxcclxuICAgICAgICAnPC9kaXY+J1xyXG4gICAgXS5qb2luKCcnKTtcclxuXHJcbnZhciBob3RlbHMgPSBbXTtcclxuXHJcbiQuYWpheCgnZGF0YS9ob3RlbHMuanNvbicsIHtcclxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBob3RlbHMgPSBkYXRhO1xyXG5cclxuICAgICAgICAvLyDQlNC70Y8g0LTQtdC80L7QvdGB0YLRgNCw0YbQuNC4INCy0L7Qt9GM0LzQtdC8IDI1MDAg0YLQvtGH0LXQui5cclxuICAgICAgICBob3RlbHMuZmVhdHVyZXMubGVuZ3RoIC89IDQ7XHJcbiAgICAgICAgeW1hcHMucmVhZHkoaW5pdCk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8g0JzQtdGC0L7QtCDRgtGA0LDRgdGB0LjRgNC+0LLQutC4INC70YPRh9CwLlxyXG4vLyDQndC1INGA0LDQsdC+0YLQsNC10YIg0L3QsNC00LXQttC90L4sINC60L7Qs9C00LAg0YLQvtGH0LrQsCDRj9Cy0LvRj9C10YLRgdGPINGD0LPQu9C+0Lwg0LzQvdC+0LPQvtGD0LPQvtC70YzQvdC40LrQsCDQuNC70Lgg0LrRgNCw0Y8uXHJcbmZ1bmN0aW9uIG5vdEFjY3VyYXRlUmF5Q2FzdChwb2ludCwgdnMpIHtcclxuICAgIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXTtcclxuXHJcbiAgICB2YXIgaW5zaWRlID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IHZzLmxlbmd0aCAtIDE7IGkgPCB2cy5sZW5ndGg7IGogPSBpKyspIHtcclxuICAgICAgICB2YXIgeGkgPSB2c1tpXVswXSwgeWkgPSB2c1tpXVsxXTtcclxuICAgICAgICB2YXIgeGogPSB2c1tqXVswXSwgeWogPSB2c1tqXVsxXTtcclxuXHJcbiAgICAgICAgdmFyIGludGVyc2VjdCA9ICgoeWkgPiB5KSAhPSAoeWogPiB5KSlcclxuICAgICAgICAgICAgJiYgKHggPCAoeGogLSB4aSkgKiAoeSAtIHlpKSAvICh5aiAtIHlpKSArIHhpKTtcclxuICAgICAgICBpZiAoaW50ZXJzZWN0KSBpbnNpZGUgPSAhaW5zaWRlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnNpZGU7XHJcbn1cclxuXHJcbnZhciBjbGFzc2lmeVBvaW50ID0gcmVxdWlyZShcInJvYnVzdC1wb2ludC1pbi1wb2x5Z29uXCIpO1xyXG5cclxuZnVuY3Rpb24gaW5pdCgpIHtcclxuICAgIC8vINCh0L7Qt9C00LDQtNC40Lwg0YHQvtCx0YHRgtCy0LXQvdC90YvQuSDQvNCw0LrQtdGCIFJlZ2lvbkNvbnRyb2wuXHJcbiAgICB2YXIgUmVnaW9uQ29udHJvbExheW91dCA9IHltYXBzLnRlbXBsYXRlTGF5b3V0RmFjdG9yeS5jcmVhdGVDbGFzcyhvcHRpb25zVGVtcGxhdGUsIHtcclxuICAgICAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIFJlZ2lvbkNvbnRyb2xMYXlvdXQuc3VwZXJjbGFzcy5idWlsZC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDbGljayA9IHltYXBzLnV0aWwuYmluZCh0aGlzLmhhbmRsZUNsaWNrLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICQodGhpcy5nZXRQYXJlbnRFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbignY2xpY2snLCAnYSNyZWdpb25zJywgdGhpcy5oYW5kbGVDbGljayk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMuZ2V0UGFyZW50RWxlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAub2ZmKCdjbGljaycsICdhI3JlZ2lvbnMnLCB0aGlzLmhhbmRsZUNsaWNrKTtcclxuICAgICAgICAgICAgICAgIFJlZ2lvbkNvbnRyb2xMYXlvdXQuc3VwZXJjbGFzcy5jbGVhci5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gJChlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXREYXRhKCkuc3RhdGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWVzID0geW1hcHMudXRpbC5leHRlbmQoe30sIHN0YXRlLmdldCgndmFsdWVzJykpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdhY3RpdmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlc1skdGFyZ2V0LmRhdGEoJ3BhcmFtJyldID0gJHRhcmdldC5kYXRhKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnNldCgndmFsdWVzJywgbmV3VmFsdWVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIC8vINCd0LDRgdC70LXQtNGD0LXQvCDQutC70LDRgdGBINC90LDRiNC10LPQviDQutC+0L3RgtGA0L7Qu9CwINC+0YIgeW1hcHMuY29udHJvbC5CdXR0b24uXHJcbiAgICAgICAgUmVnaW9uQ29udHJvbCA9IHltYXBzLnV0aWwuZGVmaW5lQ2xhc3MoZnVuY3Rpb24gKHBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgUmVnaW9uQ29udHJvbC5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcGFyYW1ldGVycyk7XHJcbiAgICAgICAgfSwgeW1hcHMuY29udHJvbC5CdXR0b24sIC8qKiBAbGVuZHMgeW1hcHMuY29udHJvbC5CdXR0b24gKi97XHJcbiAgICAgICAgICAgIG9uQWRkVG9NYXA6IGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICAgICAgICAgIFJlZ2lvbkNvbnRyb2wuc3VwZXJjbGFzcy5vbkFkZFRvTWFwLmNhbGwodGhpcywgbWFwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBTdGF0ZU1vbml0b3IoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFJlZ2lvbnModGhpcy5zdGF0ZS5nZXQoJ3ZhbHVlcycpKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIG9uUmVtb3ZlRnJvbU1hcDogZnVuY3Rpb24gKG1hcCkge1xyXG4gICAgICAgICAgICAgICAgbWFwLmdlb09iamVjdHMucmVtb3ZlKHRoaXMucmVnaW9ucyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyU3RhdGVNb25pdG9yKCk7XHJcbiAgICAgICAgICAgICAgICBSZWdpb25Db250cm9sLnN1cGVyY2xhc3Mub25SZW1vdmVGcm9tTWFwLmNhbGwodGhpcywgbWFwKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHNldHVwU3RhdGVNb25pdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTW9uaXRvciA9IG5ldyB5bWFwcy5Nb25pdG9yKHRoaXMuc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZU1vbml0b3IuYWRkKCd2YWx1ZXMnLCB0aGlzLmhhbmRsZVN0YXRlQ2hhbmdlLCB0aGlzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGNsZWFyU3RhdGVNb25pdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTW9uaXRvci5yZW1vdmVBbGwoKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGhhbmRsZVN0YXRlQ2hhbmdlOiBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRSZWdpb25zKHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBoYW5kbGVSZWdpb25zTG9hZGVkOiBmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLnJlZ2lvbnMpe1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcC5nZW9PYmplY3RzLnJlbW92ZSh0aGlzLnJlZ2lvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8v0KHQvtC30LTQsNC90LjQtSDQs9GA0LDQtNC40LXQvdGC0LAg0LTQu9GPINC70LXQs9C10L3QtNGLXHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoJy5sZWdlbmQtZ3JhZGllbnQnKS5jc3MoJ2JhY2tncm91bmQnLCAnbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgcmdiYSgxMDAsIDAsIDEwMCwgMSksIHJnYmEoMjU1LCAxNTAsIDEwMCwgMSkpJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy/Qn9GA0L7QstC10YDQutCwINC/0YDQuNC90LDQtNC70LXQttC90L7RgdGC0Lgg0YLQvtGH0LrQuCDQv9C+0LvQuNCz0L7QvdGDXHJcbiAgICAgICAgICAgICAgICB2YXIgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGFpbnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhciBudW1iZXJPZkZlYXR1cmVzID0gcmVzLmZlYXR1cmVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciBudW1iZXJPZkhvdGVscyA9IGhvdGVscy5mZWF0dXJlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnVtYmVyT2ZBbGxQb2x5Z29ucyA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhvdGVsc0luUnVzc2lhID0gMDtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVyYXRpb25zQ291bnQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZGZWF0dXJlczsgaSsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzW1wicG9pbnRzTnVtYmVyXCJdID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBrID0gMDsgayA8IHJlcy5mZWF0dXJlc1tpXS5nZW9tZXRyeS5jb29yZGluYXRlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkFsbFBvbHlnb25zKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIG15UG9seWdvbiA9IG5ldyB5bWFwcy5nZW9tZXRyeS5Qb2x5Z29uKFtyZXMuZmVhdHVyZXNbaV0uZ2VvbWV0cnkuY29vcmRpbmF0ZXNba11dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9teVBvbHlnb24ub3B0aW9ucy5zZXRQYXJlbnQobWFwLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL215UG9seWdvbi5zZXRNYXAobWFwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaG90ZWxzLmZlYXR1cmVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRpb25zQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCQ0LvQs9C+0YDQuNGC0Lwg0K/QvdC00LXQutGB0LAgKH4xLjUgc2VjINC/0YDQuCAxMDAgMDAwINC40YLQtdGA0LDRhtC40Y/RhSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5zID0gbXlQb2x5Z29uLmNvbnRhaW5zKGhvdGVscy5mZWF0dXJlc1tqXS5nZW9tZXRyeS5jb29yZGluYXRlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g0JzQtdGC0L7QtCDRgtGA0LDRgdGB0LjRgNC+0LLQutC4INC70YPRh9CwICjQsdC10Lcg0YPRh9C10YLQsCDQs9GA0LDQvdC40YfQvdGL0YUg0YHQu9GD0YfQsNC10LIpLiAofjIwMCBtcyDQv9GA0LggMTAwIDAwMCDQuNGC0LXRgNCw0YbQuNGP0YUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnRhaW5zID0gbm90QWNjdXJhdGVSYXlDYXN0KGhvdGVscy5mZWF0dXJlc1tqXS5nZW9tZXRyeS5jb29yZGluYXRlcywgcmVzLmZlYXR1cmVzW2ldLmdlb21ldHJ5LmNvb3JkaW5hdGVzW2tdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDQo9C70YPRh9GI0LXQvdC90YvQuSwg0YLQvtGH0L3Ri9C5INC80LXRgtC+0LQg0YLRgNCw0YHRgdC40YDQvtCy0LrQuCDQu9GD0YfQsC4gKH4yNzAgbXMg0L/RgNC4IDEwMCAwMDAg0LjRgtC10YDQsNGG0LjRj9GFKSAofjEgc2VjINC/0YDQuCA1MDAgMDAwINC40YLQtdGA0LDRhtC40Y/RhSkgKH4yLjIgc2VjINC/0YDQuCAx0LzQu9C9LiDQuNGC0LXRgNCw0YbQuNC5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbnMgPSBjbGFzc2lmeVBvaW50KHJlcy5mZWF0dXJlc1tpXS5nZW9tZXRyeS5jb29yZGluYXRlc1trXSwgaG90ZWxzLmZlYXR1cmVzW2pdLmdlb21ldHJ5LmNvb3JkaW5hdGVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFpbnMgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMuZmVhdHVyZXNbaV0ucHJvcGVydGllc1tcInBvaW50c051bWJlclwiXSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdGVsc0luUnVzc2lhKys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCj0LLQtdC70LjRh9C40LLQsNC10Lwg0Y3RhNGE0LXQutGC0LjQstC90L7RgdGC0Ywg0LDQu9Cz0L7RgNC40YLQvNCwLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vINCn0LXQvCDQsdC+0LvRjNGI0LUg0YLQvtGH0LXQuiDQv9GA0LjQvdCw0LTQu9C10LbQuNGCINGC0LXQutGD0YnQtdC5INGB0YLRgNCw0L3QtSwg0YLQtdC8INCy0YvRiNC1INGN0YTRhNC10LrRgtC40LLQvdC+0YHRgtGMINC00LDQvdC90L7QuSDRgdGC0YDQvtGH0LrQuC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3RlbHMuZmVhdHVyZXMuc3BsaWNlKGotLSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHNjcmlwdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHQwO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vINCb0L7Qs9C40YDQvtCy0LDQvdC40LUg0LfQvdCw0YfQtdC90LjQuVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ9Ca0L7Quy3QstC+INC40YLQtdGA0LDRhtC40LkgJyArIGl0ZXJhdGlvbnNDb3VudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0JrQvtC7LdCy0L4g0L/QvtC70LjQs9C+0L3QvtCyICcgKyBudW1iZXJPZkFsbFBvbHlnb25zKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfQmtC+0Lst0LLQviDRgtC+0YfQtdC6ICcgKyBudW1iZXJPZkhvdGVscyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0JLRgNC10LzRjyDRgNCw0LHQvtGC0Ysg0YHQutGA0LjQv9GC0LAgJyArIHNjcmlwdFRpbWUudG9GaXhlZCgyKSArICcgbXMnKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcgJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0JLRgdC10LPQviDQsiDQs9GA0LDQvdC40YbRiyDQoNC+0YHRgdC40Lgg0L/QvtC/0LDQu9C+ICcgKyBob3RlbHNJblJ1c3NpYSArICcg0YLQvtGH0LXQui4nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcgJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxvY2FsTWF4aW11bSA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlck9mRmVhdHVyZXM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudW0gPSByZXMuZmVhdHVyZXNbaV0ucHJvcGVydGllc1tcInBvaW50c051bWJlclwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsTWF4aW11bSA8IG51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbE1heGltdW0gPSBudW07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmZlYXR1cmVzW2ldLnByb3BlcnRpZXNbXCJwb2ludHNOdW1iZXJcIl0gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlcy5mZWF0dXJlc1tpXS5wcm9wZXJ0aWVzLm5hbWUgKyAnICcgKyBudW0gKyAnINC+0YLQtdC70LXQuS4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8g0JLRi9Cx0LjRgNCw0LXQvCDRjdC60YHRgtGA0LXQvNGD0LwuXHJcbiAgICAgICAgICAgICAgICBob3RlbHNJblJ1c3NpYSA9IGxvY2FsTWF4aW11bTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lvbnMgPSBuZXcgeW1hcHMuT2JqZWN0TWFuYWdlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpb25zXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZChyZXMuZmVhdHVyZXMubWFwKGZ1bmN0aW9uIChmZWF0dXJlLCBpKSB7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0KbQstC10YLQvtCy0YvQtSDRgdC+0YHRgtCw0LLQu9GP0Y7RidC40LVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFIgPSAzNTUgLSAoMTAwICsgTWF0aC5mbG9vcigxNTUgKiBmZWF0dXJlLnByb3BlcnRpZXNbXCJwb2ludHNOdW1iZXJcIl0gLyBob3RlbHNJblJ1c3NpYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgRyA9IDE1MCAtIE1hdGguZmxvb3IoMTUwICogZmVhdHVyZS5wcm9wZXJ0aWVzW1wicG9pbnRzTnVtYmVyXCJdIC8gaG90ZWxzSW5SdXNzaWEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgQiA9IDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFscGhhID0gZmVhdHVyZS5wcm9wZXJ0aWVzW1wicG9pbnRzTnVtYmVyXCJdID8gMC45IDogMC4xO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5vcHRpb25zID0ge2ZpbGxDb2xvcjogXCJyZ2JhKFwiICsgUiArIFwiLCBcIiArIEcgKyBcIiwgXCIgKyBCICsgXCIsIFwiICsgYWxwaGEgKyBcIilcIn07XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZS5pZCA9IGZlYXR1cmUucHJvcGVydGllcy5pc28zMTY2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbWFwLmdlb09iamVjdHMuYWRkKHRoaXMucmVnaW9ucyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldE1hcCgpLnNldEJvdW5kcyhcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lvbnMuZ2V0Qm91bmRzKCksXHJcbiAgICAgICAgICAgICAgICAgICAge2NoZWNrWm9vbVJhbmdlOiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGxvYWRSZWdpb25zOiBmdW5jdGlvbiAocGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB5bWFwcy5ib3JkZXJzLmxvYWQocGFyYW1zLnJlZ2lvbiwgcGFyYW1zKVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHRoaXMuaGFuZGxlUmVnaW9uc0xvYWRlZCwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICAuYWx3YXlzKHRoaXMuZW5hYmxlLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLFxyXG5cclxuICAgICAgICBtYXAgPSBuZXcgeW1hcHMuTWFwKCdtYXAnLCB7XHJcbiAgICAgICAgICAgIGNlbnRlcjogWzUwLCAzMF0sXHJcbiAgICAgICAgICAgIHpvb206IDMsXHJcbiAgICAgICAgICAgIGNvbnRyb2xzOiBbJ3R5cGVTZWxlY3RvciddXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICB0eXBlU2VsZWN0b3JTaXplOiAnc21hbGwnXHJcbiAgICAgICAgfSksXHJcblxyXG4gICAgICAgIC8vINCh0L7Qt9C00LDQtNC40Lwg0Y3QutC30LXQvNC/0LvRj9GAIFJlZ2lvbkNvbnRyb2wuXHJcbiAgICAgICAgcmVnaW9uQ29udHJvbCA9IG5ldyBSZWdpb25Db250cm9sKHtcclxuICAgICAgICAgICAgc3RhdGU6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICByZWdpb246ICdSVScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogJ3J1JyxcclxuICAgICAgICAgICAgICAgICAgICBxdWFsaXR5OiAnMSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBSRUdJT05TX0RBVEFcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgbGF5b3V0OiBSZWdpb25Db250cm9sTGF5b3V0XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZsb2F0OiAnbGVmdCcsXHJcbiAgICAgICAgICAgIG1heFdpZHRoOiBbMzAwXVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIC8vINCU0L7QsdCw0LLQuNC8INC60L7QvdGC0YDQvtC7INC90LAg0LrQsNGA0YLRgy5cclxuICAgIG1hcC5jb250cm9scy5hZGQocmVnaW9uQ29udHJvbCk7XHJcbiAgICAvLyDQo9C30L3QsNCy0LDRgtGMINC+INC40LfQvNC10L3QtdC90LjRj9GFINC/0LDRgNCw0LzQtdGC0YDQvtCyIFJlZ2lvbkNvbnRyb2wg0LzQvtC20L3QviDRgdC70LXQtNGD0Y7RidC40Lwg0L7QsdGA0LDQt9C+0LwuXHJcbiAgICByZWdpb25Db250cm9sLmV2ZW50cy5hZGQoJ3N0YXRlY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlLmdldCgndGFyZ2V0JykuZ2V0KCd2YWx1ZXMnKSk7XHJcbiAgICB9KTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=