!function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";t.exports=function(t,e,r){var a=t*e,i=n*t,o=i-(i-t),s=t-o,l=n*e,u=l-(l-e),c=e-u,f=s*c-(a-o*u-s*u-o*c);if(r)return r[0]=f,r[1]=a,r;return[f,a]};var n=+(Math.pow(2,27)+1)},function(t,e,r){"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,a=t-(r-n)+(e-n);if(a)return[a,r];return[r]}(t[0],-e[0]);var a,i,o=new Array(r+n),s=0,l=0,u=0,c=Math.abs,f=t[l],d=c(f),h=-e[u],p=c(h);d<p?(i=f,(l+=1)<r&&(f=t[l],d=c(f))):(i=h,(u+=1)<n&&(h=-e[u],p=c(h)));l<r&&d<p||u>=n?(a=f,(l+=1)<r&&(f=t[l],d=c(f))):(a=h,(u+=1)<n&&(h=-e[u],p=c(h)));var g,v,m=a+i,b=m-a,y=i-b,M=y,w=m;for(;l<r&&u<n;)d<p?(a=f,(l+=1)<r&&(f=t[l],d=c(f))):(a=h,(u+=1)<n&&(h=-e[u],p=c(h))),(y=(i=M)-(b=(m=a+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g;for(;l<r;)(y=(i=M)-(b=(m=(a=f)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(l+=1)<r&&(f=t[l]);for(;u<n;)(y=(i=M)-(b=(m=(a=h)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(u+=1)<n&&(h=-e[u]);M&&(o[s++]=M);w&&(o[s++]=w);s||(o[s++]=0);return o.length=s,o}},function(t,e,r){"use strict";t.exports=function(t,e,r){var n=t+e,a=n-t,i=e-a,o=t-(n-a);if(r)return r[0]=o+i,r[1]=n,r;return[o+i,n]}},function(t,e,r){"use strict";var n=r(0),a=r(2);t.exports=function(t,e){var r=t.length;if(1===r){var i=n(t[0],e);return i[0]?i:[i[1]]}var o=new Array(2*r),s=[.1,.1],l=[.1,.1],u=0;n(t[0],e,s),s[0]&&(o[u++]=s[0]);for(var c=1;c<r;++c){n(t[c],e,l);var f=s[1];a(f,l[0],s),s[0]&&(o[u++]=s[0]);var d=l[1],h=s[1],p=d+h,g=p-d,v=h-g;s[1]=p,v&&(o[u++]=v)}s[1]&&(o[u++]=s[1]);0===u&&(o[u++]=0);return o.length=u,o}},function(t,e,r){"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,a=t-(r-n)+(e-n);if(a)return[a,r];return[r]}(t[0],e[0]);var a,i,o=new Array(r+n),s=0,l=0,u=0,c=Math.abs,f=t[l],d=c(f),h=e[u],p=c(h);d<p?(i=f,(l+=1)<r&&(f=t[l],d=c(f))):(i=h,(u+=1)<n&&(h=e[u],p=c(h)));l<r&&d<p||u>=n?(a=f,(l+=1)<r&&(f=t[l],d=c(f))):(a=h,(u+=1)<n&&(h=e[u],p=c(h)));var g,v,m=a+i,b=m-a,y=i-b,M=y,w=m;for(;l<r&&u<n;)d<p?(a=f,(l+=1)<r&&(f=t[l],d=c(f))):(a=h,(u+=1)<n&&(h=e[u],p=c(h))),(y=(i=M)-(b=(m=a+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g;for(;l<r;)(y=(i=M)-(b=(m=(a=f)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(l+=1)<r&&(f=t[l]);for(;u<n;)(y=(i=M)-(b=(m=(a=h)+i)-a))&&(o[s++]=y),M=w-((g=w+m)-(v=g-w))+(m-v),w=g,(u+=1)<n&&(h=e[u]);M&&(o[s++]=M);w&&(o[s++]=w);s||(o[s++]=0);return o.length=s,o}},function(t,e,r){"use strict";var n=r(0),a=r(4),i=r(3),o=r(1),s=5;function l(t,e){for(var r=new Array(t.length-1),n=1;n<t.length;++n)for(var a=r[n-1]=new Array(t.length-1),i=0,o=0;i<t.length;++i)i!==e&&(a[o++]=t[n][i]);return r}function u(t){if(1===t.length)return t[0];if(2===t.length)return["sum(",t[0],",",t[1],")"].join("");var e=t.length>>1;return["sum(",u(t.slice(0,e)),",",u(t.slice(e)),")"].join("")}function c(t){if(2===t.length)return[["sum(prod(",t[0][0],",",t[1][1],"),prod(-",t[0][1],",",t[1][0],"))"].join("")];for(var e=[],r=0;r<t.length;++r)e.push(["scale(",u(c(l(t,r))),",",(n=r,1&n?"-":""),t[0][r],")"].join(""));return e;var n}function f(t){for(var e=[],r=[],s=function(t){for(var e=new Array(t),r=0;r<t;++r){e[r]=new Array(t);for(var n=0;n<t;++n)e[r][n]=["m",n,"[",t-r-1,"]"].join("")}return e}(t),f=[],d=0;d<t;++d)0==(1&d)?e.push.apply(e,c(l(s,d))):r.push.apply(r,c(l(s,d))),f.push("m"+d);var h=u(e),p=u(r),g="orientation"+t+"Exact",v=["function ",g,"(",f.join(),"){var p=",h,",n=",p,",d=sub(p,n);return d[d.length-1];};return ",g].join("");return new Function("sum","prod","scale","sub",v)(a,n,i,o)}var d=f(3),h=f(4),p=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,r){var n,a=(t[1]-r[1])*(e[0]-r[0]),i=(t[0]-r[0])*(e[1]-r[1]),o=a-i;if(a>0){if(i<=0)return o;n=a+i}else{if(!(a<0))return o;if(i>=0)return o;n=-(a+i)}var s=3.3306690738754716e-16*n;return o>=s||o<=-s?o:d(t,e,r)},function(t,e,r,n){var a=t[0]-n[0],i=e[0]-n[0],o=r[0]-n[0],s=t[1]-n[1],l=e[1]-n[1],u=r[1]-n[1],c=t[2]-n[2],f=e[2]-n[2],d=r[2]-n[2],p=i*u,g=o*l,v=o*s,m=a*u,b=a*l,y=i*s,M=c*(p-g)+f*(v-m)+d*(b-y),w=7.771561172376103e-16*((Math.abs(p)+Math.abs(g))*Math.abs(c)+(Math.abs(v)+Math.abs(m))*Math.abs(f)+(Math.abs(b)+Math.abs(y))*Math.abs(d));return M>w||-M>w?M:h(t,e,r,n)}];!function(){for(;p.length<=s;)p.push(f(p.length));for(var e=[],r=["slow"],n=0;n<=s;++n)e.push("a"+n),r.push("o"+n);var a=["function getOrientation(",e.join(),"){switch(arguments.length){case 0:case 1:return 0;"];for(n=2;n<=s;++n)a.push("case ",n,":return o",n,"(",e.slice(0,n).join(),");");a.push("}var s=new Array(arguments.length);for(var i=0;i<arguments.length;++i){s[i]=arguments[i]};return slow(s);}return getOrientation"),r.push(a.join(""));var i=Function.apply(void 0,r);for(t.exports=i.apply(void 0,[function(t){var e=p[t.length];return e||(e=p[t.length]=f(t.length)),e.apply(void 0,t)}].concat(p)),n=0;n<=s;++n)t.exports[n]=p[n]}()},function(t,e,r){t.exports=function(t,e){for(var r=e[0],a=e[1],i=t.length,o=1,s=i,l=0,u=i-1;l<s;u=l++){var c=t[l],f=t[u],d=c[1],h=f[1];if(h<d){if(h<a&&a<d){var p=n(c,f,e);if(0===p)return 0;o^=0<p|0}else if(a===d){var g=t[(l+1)%i],v=g[1];if(d<v){var p=n(c,f,e);if(0===p)return 0;o^=0<p|0}}}else if(d<h){if(d<a&&a<h){var p=n(c,f,e);if(0===p)return 0;o^=p<0|0}else if(a===d){var g=t[(l+1)%i],v=g[1];if(v<d){var p=n(c,f,e);if(0===p)return 0;o^=p<0|0}}}else if(a===d){var m=Math.min(c[0],f[0]),b=Math.max(c[0],f[0]);if(0===l){for(;u>0;){var y=(u+i-1)%i,M=t[y];if(M[1]!==a)break;var w=M[0];m=Math.min(m,w),b=Math.max(b,w),u=y}if(0===u)return m<=r&&r<=b?0:1;s=u+1}for(var x=t[(u+i-1)%i][1];l+1<s;){var M=t[l+1];if(M[1]!==a)break;var w=M[0];m=Math.min(m,w),b=Math.max(b,w),l+=1}if(m<=r&&r<=b)return 0;var j=t[(l+1)%i][1];r<m&&x<a!=j<a&&(o^=1)}}return 2*o-1};var n=r(5)},function(t,e,r){var n={region:{title:"Регион",items:[{id:"001",title:"Страны мира"},{id:"BY",title:"Беларусь"},{id:"KZ",title:"Казахстан"},{id:"RU",title:"Россия"},{id:"TR",title:"Турция"},{id:"UA",title:"Украина"}]},lang:{title:"Язык",items:[{id:"en",title:"Английский"},{id:"be",title:"Белорусский"},{id:"kk",title:"Казахский"},{id:"ru",title:"Русский"},{id:"tr",title:"Турецкий"},{id:"uk",title:"Украинский"}]},quality:{title:"Точность границ",items:[{id:"0",title:"0"},{id:"1",title:"1"},{id:"2",title:"2"},{id:"3",title:"3"}]}},a=['<div style="line-height: 34px; background-color: #80808080;" id="regions-params">',"{% for paramName, param in data.params %}","{% for key, value in state.values %}","{% if key == paramName %}",'<div class="btn-group btn-group-xs">','<button{% if state.enabled %}{% else %} disabled{% endif %} type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">',"<span>{{ param.title }}</span>",'<span class="value">: {{ value }}</span>','&nbsp;<span class="caret"></span>',"</button>",'<ul class="dropdown-menu {{ paramName }}">',"{% for item in param.items %}",'<li{% if item.id == value %} class="active"{% endif %}>','<a id="regions" href="#" data-param="{{ paramName }}" data-id="{{ item.id }}">',"{{ item.title }}","</a>","</li>","{% endfor %}","</ul>","</div>&nbsp;","{% endif %}","{% endfor %}","{% endfor %}","</div>"].join("");ymaps.ready(function(){var t=ymaps.templateLayoutFactory.createClass(a,{build:function(){t.superclass.build.call(this),this.handleClick=ymaps.util.bind(this.handleClick,this),$(this.getParentElement).on("click","a#regions",this.handleClick)},clear:function(){$(this.getParentElement).off("click","a#regions",this.handleClick),t.superclass.clear.call(this)},handleClick:function(t){t.preventDefault();var e=$(t.currentTarget),r=this.getData().state,n=ymaps.util.extend({},r.get("values"));e.hasClass("active")||(n[e.data("param")]=e.data("id"),r.set("values",n))}}),e=ymaps.util.defineClass(function(t){e.superclass.constructor.call(this,t)},ymaps.control.Button,{onAddToMap:function(t){e.superclass.onAddToMap.call(this,t),this.setupStateMonitor(),this.loadRegions(this.state.get("values"))},onRemoveFromMap:function(t){t.geoObjects.remove(this.regions),this.clearStateMonitor(),e.superclass.onRemoveFromMap.call(this,t)},setupStateMonitor:function(){this.stateMonitor=new ymaps.Monitor(this.state),this.stateMonitor.add("values",this.handleStateChange,this)},clearStateMonitor:function(){this.stateMonitor.removeAll()},handleStateChange:function(t){this.loadRegions(t)},handleRegionsLoaded:function(t){this.regions&&r.geoObjects.remove(this.regions),jQuery(".legend-gradient").css("background","linear-gradient(to bottom, rgba(100, 0, 100, 1), rgba(255, 150, 100, 1))");var e=performance.now(),n=new ymaps.geometry.Polygon(t.features[0].geometry.coordinates),a=performance.now()-e;console.log("Время создания полигона "+a.toFixed(2)+" ms");var o=t.features.length;n.options.setParent(r.options),n.setMap(r);for(var s=0;s<1200*o;s++)i(t.features[0].geometry.coordinates[0],[53.347238,83.76547]);var l=performance.now()-e;console.log("Кол-во полигонов "+o),console.log("Кол-во точек 1200"),console.log("Время работы скрипта "+l.toFixed(2)+" ms"),this.regions=new ymaps.ObjectManager,this.regions.add(t.features.map(function(t,e){return t.options={fillColor:"rgba("+(100+2*e)+", "+2*e+", 100, 0.8)"},t.id=t.properties.iso3166,t})),r.geoObjects.add(this.regions),this.getMap().setBounds(this.regions.getBounds(),{checkZoomRange:!0})},loadRegions:function(t){return this.disable(),ymaps.borders.load(t.region,t).then(this.handleRegionsLoaded,this).always(this.enable,this)}}),r=new ymaps.Map("map",{center:[50,30],zoom:3,controls:["typeSelector"]},{typeSelectorSize:"small"}),o=new e({state:{enabled:!0,values:{region:"RU",lang:"ru",quality:"1"}},data:{params:n},options:{layout:t},float:"left",maxWidth:[300]});r.controls.add(o),o.events.add("statechange",function(t){console.log(t.get("target").get("values"))})});var i=r(6)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,